version: "3.9"

services:
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: orchestrator
      POSTGRES_USER: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - codex-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - codex-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  orchestrator:
    build:
      context: .
      dockerfile: orchestrator/Dockerfile.production
      args:
        - BUILD_VERSION=${BUILD_VERSION:-latest}
    restart: always
    environment:
      - ORCH_DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/orchestrator
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ORCH_SECRET_KEY=${ORCH_SECRET_KEY}
      - ORCH_JWT_SECRET_KEY=${ORCH_JWT_SECRET_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - "8000:8000"
    networks:
      - codex-network
      - external-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/observability/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes:
      - ./logs:/var/log/codex-orchestrator
      - ./data/artifacts:/app/artifacts

  agent:
    build:
      context: .
      dockerfile: agents/runner/Dockerfile.production
    restart: always
    environment:
      - ORCH_URL=http://orchestrator:8000
      - AGENT_SECRET_KEY=${AGENT_SECRET_KEY}
      - AGENT_INTERVAL=2.0
      - AGENT_EXECUTOR=builtin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - LOG_LEVEL=INFO
    networks:
      - codex-network
    depends_on:
      orchestrator:
        condition: service_healthy
    deploy:
      replicas: 3
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./workspaces:/app/workspaces

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./ui/dist:/usr/share/nginx/html:ro
    networks:
      - external-network
      - codex-network
    depends_on:
      - orchestrator
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - codex-network
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - codex-network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: always
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - codex-network
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      - "14268:14268"

  backup:
    image: postgres:16-alpine
    restart: always
    environment:
      - PGPASSWORD=${DB_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
    volumes:
      - ./scripts/backup.sh:/backup.sh:ro
      - backup_data:/backups
    networks:
      - codex-network
    entrypoint: ["/bin/sh", "-c"]
    command: ["while true; do /backup.sh; sleep 86400; done"]
    depends_on:
      - db

networks:
  codex-network:
    driver: bridge
    internal: true
  external-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backup_data:
    driver: local