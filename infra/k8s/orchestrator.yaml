apiVersion: v1
kind: Namespace
metadata:
  name: codex-orch
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orchestrator
  namespace: codex-orch
spec:
  replicas: 1
  selector:
    matchLabels: { app: orchestrator }
  template:
    metadata:
      labels: { app: orchestrator }
    spec:
      containers:
        - name: api
          image: your-repo/orchestrator:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: ORCH_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: orch-secrets
                  key: database_url
            - name: ORCH_REQUIRE_APPROVAL
              value: "true"
            - name: ORCH_RATE_LIMIT_PER_MIN
              value: "1000"
            - name: ORCH_SCHEDULER_BACKGROUND_INTERVAL
              value: "1.0"
            # Optional OpenAI-backed planner
            - name: ORCH_ENABLE_OPENAI_PLANNER
              value: "false"
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: orch-openai
                  key: api_key
                  optional: true
            - name: ORCH_OPENAI_MODEL
              value: "gpt-4o-mini"
            # Optional base URL for self-hosted/proxied endpoints
            - name: ORCH_OPENAI_BASE_URL
              value: ""
          ports:
            - containerPort: 8000
          readinessProbe:
            httpGet: { path: /observability/health, port: 8000 }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: /observability/health, port: 8000 }
            initialDelaySeconds: 10
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: orchestrator
  namespace: codex-orch
spec:
  selector: { app: orchestrator }
  ports:
    - name: http
      port: 8000
      targetPort: 8000
---
apiVersion: v1
kind: Secret
metadata:
  name: orch-secrets
  namespace: codex-orch
type: Opaque
stringData:
  database_url: postgresql+psycopg2://postgres:postgres@postgres:5432/orchestrator

---
apiVersion: v1
kind: Secret
metadata:
  name: orch-openai
  namespace: codex-orch
type: Opaque
stringData:
  # Populate with your OpenAI API key
  api_key: ""
